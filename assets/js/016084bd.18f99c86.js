"use strict";(self.webpackChunkaaron=self.webpackChunkaaron||[]).push([[1080],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3480:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},i="Special Forms",l={unversionedId:"CS61A/misc/Special Forms",id:"CS61A/misc/Special Forms",title:"Special Forms",description:"Special form expressions contain a\xa0special form\xa0as the operator. Special form expressions\xa0do not\xa0follow the same rules of evaluation as call expressions. Each special form has its own rules of evaluation -- that's what makes them special! Here's the\xa0Scheme Specification\xa0to reference the special forms we will cover in this class.",source:"@site/docs/CS61A/misc/Special Forms.md",sourceDirName:"CS61A/misc",slug:"/CS61A/misc/Special Forms",permalink:"/aaron/docs/CS61A/misc/Special Forms",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CS61A/misc/Special Forms.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sequences",permalink:"/aaron/docs/CS61A/misc/Sequences"},next:{title:"Trees",permalink:"/aaron/docs/CS61A/misc/TREES"}},s={},p=[],c={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"special-forms"},"Special Forms"),(0,a.kt)("p",null,"Special form expressions contain a\xa0",(0,a.kt)("strong",{parentName:"p"},"special form"),"\xa0as the operator. Special form expressions\xa0",(0,a.kt)("em",{parentName:"p"},"do not"),"\xa0follow the same rules of evaluation as call expressions. Each special form has its own rules of evaluation -- that's what makes them special! Here's the\xa0",(0,a.kt)("a",{parentName:"p",href:"https://cs61a.org/articles/scheme-spec/#special-forms-2"},"Scheme Specification"),"\xa0to reference the special forms we will cover in this class."),(0,a.kt)("p",null,"It is important to note that everything in Scheme is either an\xa0",(0,a.kt)("strong",{parentName:"p"},"atomic"),"\xa0or an\xa0",(0,a.kt)("strong",{parentName:"p"},"expression"),", so although these special forms look and operate similarly to Python, they are evaluated differently."),(0,a.kt)("p",null,"Special forms like\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"if"),",\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"cond"),",\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"and"),",\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"or"),"\xa0in Python direct the control flow of a program and allow you to evaluate specific expressions under some condition. In Scheme, however, these special forms are expressions that take in a set amount of parameters and return some value based on the condition passed in."),(0,a.kt)("h1",{id:"built-in-procedures"},"Built-in Procedures"),(0,a.kt)("p",null,"To be able to call built-in procedures, such as\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"+"),", you need to complete the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"BuiltinProcedure"),"\xa0case within the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"scheme_apply"),"\xa0function in\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"scheme_eval_apply.py"),". Built-in procedures are applied by calling a corresponding Python function that implements the procedure."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To see a list of all Scheme built-in procedures used in the project, look in the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"scheme_builtins.py"),"\xa0file. Any function decorated with\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"@builtin"),"\xa0will be added to the globally-defined\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"BUILTINS"),"\xa0list.")),(0,a.kt)("p",null,"A\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"BuiltinProcedure"),"\xa0has two instance attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"py_func"),": the\xa0",(0,a.kt)("em",{parentName:"li"},"Python"),"\xa0function that implements the built-in Scheme procedure."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"need_env"),": a Boolean flag that indicates whether or not this built-in procedure will need the current environment to be passed in as the last argument. The environment is required, for instance, to implement the built-in\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"eval"),"\xa0procedure.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"scheme_apply"),"\xa0takes the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"procedure"),"\xa0object, a list of argument values, and the current environment.\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"args"),"\xa0is a Scheme list represented as a\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"Pair"),"\xa0object or\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."))}m.isMDXComponent=!0}}]);