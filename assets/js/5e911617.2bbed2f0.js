"use strict";(self.webpackChunkaaron=self.webpackChunkaaron||[]).push([[898],{3905:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>d});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),l=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},o=function(e){var a=l(e.components);return n.createElement(m.Provider,{value:a},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},N=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,m=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),c=l(t),N=r,d=c["".concat(m,".").concat(N)]||c[N]||k[N]||s;return t?n.createElement(d,p(p({ref:a},o),{},{components:t})):n.createElement(d,p({ref:a},o))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,p=new Array(s);p[0]=N;var i={};for(var m in a)hasOwnProperty.call(a,m)&&(i[m]=a[m]);i.originalType=e,i[c]="string"==typeof e?e:r,p[1]=i;for(var l=2;l<s;l++)p[l]=t[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}N.displayName="MDXCreateElement"},1392:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(7462),r=(t(7294),t(3905));const s={},p=void 0,i={unversionedId:"CS61A/lec/cs_lec_16",id:"CS61A/lec/cs_lec_16",title:"cs_lec_16",description:"Lists in Environment Diagram",source:"@site/docs/CS61A/lec/cs_lec_16.md",sourceDirName:"CS61A/lec",slug:"/CS61A/lec/cs_lec_16",permalink:"/aaron/docs/CS61A/lec/cs_lec_16",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CS61A/lec/cs_lec_16.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cs_lec_15",permalink:"/aaron/docs/CS61A/lec/cs_lec_15"},next:{title:"cs_lec_17",permalink:"/aaron/docs/CS61A/lec/cs_lec_17"}},m={},l=[],o={toc:l};function c(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Lists in Environment Diagram"),"\n",(0,r.kt)("strong",{parentName:"p"},"Assume that before each example below we execute"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"s=[2,3]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t=[5,6]")),(0,r.kt)("p",null,"Operation: ",(0,r.kt)("strong",{parentName:"p"},"Append")," adds one element to the list\nExample:\n",(0,r.kt)("inlineCode",{parentName:"p"},"s.append(t)"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t=0"),"\nResult:\n",(0,r.kt)("inlineCode",{parentName:"p"},"s -> [2,3,[5,6]]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t->0")),(0,r.kt)("p",null,"Operation ",(0,r.kt)("strong",{parentName:"p"},"Extend")," combines list elements one after another\n",(0,r.kt)("inlineCode",{parentName:"p"},"a = [1,[2]]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"b=[[3],4]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"c = a+b"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"d=[a,b]")),(0,r.kt)("p",null,"Operation ",(0,r.kt)("strong",{parentName:"p"},"addition and slicing")," creates new lists containing existing elements\n",(0,r.kt)("inlineCode",{parentName:"p"},"a=s+[t]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"b=a[1:]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"a[1] = 9"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"b[1][1]=0")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"list")," function also creates a new list contianing existing elements\n",(0,r.kt)("inlineCode",{parentName:"p"},"t=list(s)"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"s[1] = 0")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"a = [1,[2],3]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"b = list(a)"),"\nSo in this case we would have ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"b")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"b")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"b")))))," is ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"a")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"))))),",\n![","[chrome_KJwaFV9XZz.png]","]\n![","[chrome_jNdnZFw6Sg.png]","]\n",(0,r.kt)("strong",{parentName:"p"},"List in Lists in Lists in Environment Diagrams"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t=[1,2,3]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t[1:3] = [t]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t.extend(t)"),"\nSo the above example will return:\n",(0,r.kt)("inlineCode",{parentName:"p"},"t=[1, [...], 1, [...]]"),", where the ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},".")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"...")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.10556em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"."),(0,r.kt)("span",{parentName:"span",className:"mord"},"."),(0,r.kt)("span",{parentName:"span",className:"mord"},".")))))," basically represents ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"t")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.61508em",verticalAlign:"0em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"t")))))," nested within the original list t. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"t = [[1,2],[3,4]]"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"t[0].append(t[1:2])")),(0,r.kt)("p",null,"![","[WhatsApp Image 2022-10-21 at 1.43.02 PM.jpeg]","]\n![","[WhatsApp Image 2022-10-21 at 1.45.55 PM.jpeg]","]\n",(0,r.kt)("inlineCode",{parentName:"p"},"john.elf.work(john)"),"\n-> 'Peon, I work'"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: Iterables and Iterators"),"\n",(0,r.kt)("strong",{parentName:"p"},"Using BUilt-in Functions and Comprehensions"),"\nWhat are the indices of all elements in a list s that have the smallest absolute value?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def min_abs_indices(s):\n    min_abs = min(map(abs,s))\n    return [i for i in range(len(s)) if s[i] == min_abs]\n")),(0,r.kt)("p",null,"What's the largest sum of two adjacent elements in a list s? (Assume len(s) > 1)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sum_indices(s):\n    return max([s[i]+s[i+1] for i in range(len(s)-1)])\n")),(0,r.kt)("p",null,"Another method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def sum_indices(s):\n    return list(zip(s[0:len(s)-1],s[1:]))\n")),(0,r.kt)("p",null,"Create a dictionary mapping each digit d to the lists of elements in s that end with d."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def dic_comprehension(s):\n    lis = [n%10 for i in s]\n    return {i: [x for x in s if x%10==i] for i in range(10) if i in [n%10 for n in s]}\n")))}c.isMDXComponent=!0}}]);