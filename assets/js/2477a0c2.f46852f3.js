"use strict";(self.webpackChunkaaronzheng=self.webpackChunkaaronzheng||[]).push([[4538],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,i(i({ref:t},p),{},{components:r})):n.createElement(d,i({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},2618:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={},i=void 0,c={unversionedId:"CS61A/misc/tree_representation",id:"CS61A/misc/tree_representation",title:"tree_representation",description:"Tree Data Abstraction Implementation",source:"@site/docs/CS61A/misc/tree_representation.md",sourceDirName:"CS61A/misc",slug:"/CS61A/misc/tree_representation",permalink:"/docs/CS61A/misc/tree_representation",draft:!1,editUrl:"https://github.com/zhenga1/aaronzheng/tree/main/docs/CS61A/misc/tree_representation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"slicing",permalink:"/docs/CS61A/misc/slicing"},next:{title:"useless scheme",permalink:"/docs/CS61A/misc/useless scheme"}},s={},l=[{value:"Tree Data Abstraction Implementation",id:"tree-data-abstraction-implementation",level:2}],p={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"tree-data-abstraction-implementation"},"Tree Data Abstraction Implementation"),(0,a.kt)("p",null,"For your reference, we have provided our implementation of trees as a data abstraction."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jupyter"},'def tree(label, branches=[]):\n    """Construct a tree with the given label value and a list of branches."""\n    return [label] + list(branches)\n\ndef label(tree):\n    """Return the label value of a tree."""\n    return tree[0]\n\ndef branches(tree):\n    """Return the list of branches of the given tree."""\n    return tree[1:]\n\ndef is_leaf(tree):\n    """Returns True if the given tree\'s list of branches is empty, and False\n    otherwise.\n    """\n    return not branches(tree)\nt = tree(1, [tree(2), tree(4)])\nt\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jupyter"},"is_leaf(t[1:][1])\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jupyter"},"[label(b) for b in branches(t)]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jupyter"},"branches(tree(5, [t, tree(3)]))[0][0]\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jupyter"},"branches(tree(5, [t, tree(3)]))\n")))}u.isMDXComponent=!0}}]);