"use strict";(self.webpackChunkaaron=self.webpackChunkaaron||[]).push([[2906],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1050:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l=void 0,i={unversionedId:"JIPCAD/JIPCAD 10",id:"JIPCAD/JIPCAD 10",title:"JIPCAD 10",description:"Translucent/Transparent design:",source:"@site/docs/JIPCAD/JIPCAD 10.md",sourceDirName:"JIPCAD",slug:"/JIPCAD/JIPCAD 10",permalink:"/aaron/docs/JIPCAD/JIPCAD 10",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/JIPCAD/JIPCAD 10.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JIPCAD 1",permalink:"/aaron/docs/JIPCAD/JIPCAD 1"},next:{title:"JIPCAD 2",permalink:"/aaron/docs/JIPCAD/JIPCAD 2"}},s={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Translucent/Transparent design:\n1) Investigate a customised blender, using graphics, pick a comfortable/good renderer\n2) Investigate what it would take to transfer one of those meshes into NOME/JIPCAD\n3) Maybe using STL files? That can help with the rendering, since all the files can be customised. "),(0,a.kt)("p",null,"Take neat cool gemoetry in the format of STL file"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Input format, a little translater, essentially called STL to jipcad. For every triangle it finds in the STL, it creates triangle in jipcad. "),(0,a.kt)("li",{parentName:"ul"},"Ideally it would be cool to make a translater to convert stl files directly to nome. "),(0,a.kt)("li",{parentName:"ul"},"Do the triangles, translate the")),(0,a.kt)("p",null,"STL will first create triangles:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Breaks into triangles")),(0,a.kt)("p",null,"Export STL without merging."),(0,a.kt)("p",null,"STL breaks up the points of the shape into triangles in an intelligent way. "),(0,a.kt)("p",null,"Non-planar facces -> It really kind of matters how you split them into triangles(depending on the diagonals)"),(0,a.kt)("p",null,"If you do a sweep -> with no twist -> then whatever\nBut if there is a twist -> Then the nome thing needs to have a good triangle. "),(0,a.kt)("p",null,"It would be bad if you have non-planar quadrilaterals and then you would want the non-planar body into planar quads. "),(0,a.kt)("p",null,"Non-planar quadrilaterals, just break it into planar triangles."),(0,a.kt)("p",null,"That is kinda what STL files does."))}p.isMDXComponent=!0}}]);