"use strict";(self.webpackChunkaaron=self.webpackChunkaaron||[]).push([[534],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),f=a,d=p["".concat(i,".").concat(f)]||p[f]||m[f]||o;return t?r.createElement(d,l(l({ref:n},u),{},{components:t})):r.createElement(d,l({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8280:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const o={},l=void 0,s={unversionedId:"CS61A/lec/cs_lec_2",id:"CS61A/lec/cs_lec_2",title:"cs_lec_2",description:"Warren Hall can be used for CS 61a help",source:"@site/docs/CS61A/lec/cs_lec_2.md",sourceDirName:"CS61A/lec",slug:"/CS61A/lec/cs_lec_2",permalink:"/aaron/docs/CS61A/lec/cs_lec_2",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CS61A/lec/cs_lec_2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"cs_lec_19",permalink:"/aaron/docs/CS61A/lec/cs_lec_19"},next:{title:"Interpreter",permalink:"/aaron/docs/CS61A/lec/cs_lec_20"}},i={},c=[],u={toc:c};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Warren Hall can be used for CS 61a help\nTypes of expressions\nExpression descrbes a computation and evaluates to a value\n18+69\n6/23\nsqrt(3493161)"),(0,a.kt)("p",null,"function call notation\nCall notaiton"),(0,a.kt)("p",null,"Anatomy of call expression"),(0,a.kt)("p",null,"THIS IS THE CALL EXPRESSION\n-> add (2,3))\n-> Operator(the function name) ( Operand, Operand )"),(0,a.kt)("p",null,"Evaluation procedure for call exressions:"),(0,a.kt)("p",null,"Evaluating nested expression\nThis is all jsut one call expression\nmul(add(4,mul(4,6)),add(3,5))\nThe operator is mul, the operands are add(4,mul(4,6)) and add(3,5)\nCall procedure is the operands. "),(0,a.kt)("p",null,"All arguments are values\nArgument is just a number"),(0,a.kt)("p",null,"Execution rule for assignment statements:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"evaluate all expressions to the right of = from left to right.")),(0,a.kt)("p",null,"Defining Functions\nssignment is a simple means of abtraction: binds names to values"),(0,a.kt)("p",null,"Function definition is a more powerful means of abstraction: binds names to expression"),(0,a.kt)("p",null,"Function definition is a more powerful means of abstraction: binds names to expressions\nFunction signature indicates how many arguments a function takes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"def <name> <formal Paramenters>:\n    return <return expressions>\n")),(0,a.kt)("p",null,"Calling user-defined functions\nProcedure for calling/applying user-defined functions (version 1):"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add a local frame, forming a new environemnt"),(0,a.kt)("li",{parentName:"ol"},"Bind the functions' formal paramenters to its arguments in that frame"),(0,a.kt)("li",{parentName:"ol"},"Execute the body of the function in that new environment")),(0,a.kt)("p",null,"from operator import mul"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-def",metastring:"square(x):","square(x):":!0},"    return mul(x,x)\nsquare(-2)```\n\nGlobal frame \nmul  -> func mul(...)\nsquare -> func square(x)\n\nOriginal name of fucntion called\nsquare\n    x | -2\n    return value 4\nA function\n\nLooking Up Names In Environment\nEvery expression is evaluated in the context of an environment.\n\nSo far, the ccurrent environemtn is either:\n- The globl frame alone, or \n- A local frame, followed by the global frame\n\nMost important two things I'll say all day:\nAn environment is a sequence of frames.\n\nA name evaluates to the value bound to that name in the\n earliest frame of the curent environemnt in which that name is found.\n")))}p.isMDXComponent=!0}}]);